{"version":3,"sources":["components/ColorPick.js","redux/types.js","redux/actions/todoAction.js","components/addTodo.js","components/todoActions.js","components/todo.js","components/todoList.js","App.js","redux/reducers/todoReducer.js","redux/reducers/rootReducer.js","redux/sagas/todoSaga.js","redux/store.js","index.js"],"names":["ColorPick","activeColor","setActive","className","map","color","i","style","backgroundColor","onClick","TODOS_FETCH","SET_TODOS","SET_TODO","CREATE_TODO","ADD_TODO","UPDATE_TODO","DELETE_TODO","CLEAR_TODOLIST","CLEAR_STATUS","CLEAR_FROM_LIST","THROW_ERROR_MESSAGE","setTodos","data","type","payload","createTodo","updateTodo","throwErrorMessage","clearStatus","AddTodo","cancel","dispatch","useDispatch","addedStatus","useSelector","state","todos","added","useState","title","setTitle","description","setDescription","setColor","titleLength","setTitleLength","descLength","setDescLength","useEffect","setTimeout","save","edit","allow","trim","length","_id","placeholder","value","onChange","e","target","size","TodoActions","addTodo","setAddTodo","clearTodoList","Todo","setEdit","borderBottom","id","TodoList","todo","App","errorMessage","toast","error","initialState","todoReducer","action","push","filter","combineReducers","todoWatcher","todosFetchWorker","createTodoWorker","updateTodoWorker","clearTodoListWorker","deleteTodoWorker","throwErrorChannel","channel","takeEvery","take","put","call","todosFetch","res","message","newData","console","log","forEach","todoItem","slice","clearTodo","a","fetch","process","method","request","json","headers","body","JSON","stringify","Promise","all","then","saga","createSagaMiddleware","store","createStore","rootReducer","compose","applyMiddleware","run","dotEnv","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.22ce75ff.chunk.js","sourcesContent":["import {Check} from 'react-feather'\r\n\r\nconst ColorPick = ({activeColor,setActive})=>{\r\n    const colors=['transparent','#e36d78','#f6dc5a','#76f353','#52c5ec']\r\n    return (\r\n        <div className='color-pick'>\r\n            {colors.map((color,i)=>\r\n                <span key={i}\r\n                      style={{backgroundColor:color}}\r\n                      onClick={()=>setActive(color)}>\r\n                    {color===activeColor && <Check/>}\r\n                </span>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default ColorPick","export const TODOS_FETCH='TODOS_FETCH';\r\nexport const SET_TODOS='SET_TODOS';\r\nexport const SET_TODO='SET_TODO';\r\nexport const CREATE_TODO='CREATE_TODO';\r\nexport const ADD_TODO='ADD_TODO';\r\nexport const UPDATE_TODO='UPDATE_TODO';\r\nexport const DELETE_TODO='DELETE_TODO';\r\nexport const CLEAR_TODOLIST='CLEAR_TODOLIST';\r\nexport const CLEAR_STATUS='CLEAR_STATUS';\r\nexport const CLEAR_FROM_LIST='CLEAR_FROM_LIST';\r\nexport const THROW_ERROR_MESSAGE='THROW_ERROR_MESSAGE';","import {\r\n    ADD_TODO, CLEAR_FROM_LIST,\r\n    CLEAR_STATUS,\r\n    CLEAR_TODOLIST,\r\n    CREATE_TODO, DELETE_TODO, SET_TODO,\r\n    SET_TODOS,\r\n    THROW_ERROR_MESSAGE,\r\n    TODOS_FETCH, UPDATE_TODO\r\n} from \"../types\";\r\n//fetch todos\r\nexport const todosFetch=()=>({\r\n    type:TODOS_FETCH\r\n})\r\n//set fetched todos\r\nexport const setTodos=(data)=>({\r\n    type:SET_TODOS,\r\n    payload:data\r\n})\r\n// create todo in db\r\nexport const createTodo = (data)=>({\r\n    type:CREATE_TODO,\r\n    payload:data\r\n})\r\n// update todo in db\r\nexport const updateTodo = (data)=>({\r\n    type:UPDATE_TODO,\r\n    payload:data\r\n})\r\n//delete todo in db\r\nexport const deleteTodo = (id)=>({\r\n    type:DELETE_TODO,\r\n    payload:id\r\n})\r\n//clear todo from list\r\nexport const clearFromList = (id)=>({\r\n    type:CLEAR_FROM_LIST,\r\n    payload:id\r\n})\r\n//add created todo to list\r\nexport const addTodo = (data)=>({\r\n    type:ADD_TODO,\r\n    payload:data\r\n})\r\n// update edited todo to list\r\nexport const setTodo = (data)=>({\r\n    type:SET_TODO,\r\n    payload:data\r\n})\r\n// delete all todos in db\r\nexport const clearTodoList=(data)=>({\r\n    type:CLEAR_TODOLIST,\r\n    payload:data\r\n})\r\n// add error message\r\nexport const throwErrorMessage = (data)=>({\r\n    type:THROW_ERROR_MESSAGE,\r\n    payload:data\r\n})\r\n// clear added status and error message\r\nexport const clearStatus = ()=>({\r\n    type:CLEAR_STATUS\r\n})","import {useState, useEffect} from 'react';\r\nimport {X, Plus, Save} from 'react-feather'\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport ColorPick from \"./ColorPick\";\r\nimport {clearStatus, createTodo, updateTodo} from \"../redux/actions/todoAction\";\r\n\r\nconst AddTodo = ({cancel, data = null}) => {\r\n    const dispatch = useDispatch();\r\n    const addedStatus = useSelector(state => state.todos.added);\r\n    const [title, setTitle] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [color, setColor] = useState('transparent');\r\n    const [titleLength, setTitleLength] = useState(false);\r\n    const [descLength, setDescLength] = useState(false);\r\n    //if clicked edit todo, fill fields with existing values\r\n    useEffect(() => {\r\n        if (data) {\r\n            setTitle(data.title);\r\n            setDescription(data.description);\r\n            setColor(data.color)\r\n        }\r\n    }, [data])\r\n    useEffect(() => {\r\n        //if todo is successfully edited , clear added status and close form\r\n        if (data && addedStatus) {\r\n            setTimeout(function () {\r\n                dispatch(clearStatus())\r\n                cancel()\r\n            }, 500)\r\n        }\r\n        //if todo is successfully added, clear fields and added status\r\n        else if (addedStatus) {\r\n            setTitle('');\r\n            setDescription('');\r\n            setColor('transparent');\r\n            setTimeout(function () {\r\n                dispatch(clearStatus())\r\n            }, 1000)\r\n        }\r\n    }, [dispatch, addedStatus, cancel, data])\r\n    //save changes (if edit true -> update todo else add)\r\n    const save = (edit = false) => {\r\n        let allow = true\r\n        if (title.trim().length < 3) {\r\n            setTitleLength(true);\r\n            allow = false;\r\n        }\r\n        if (description.trim().length < 5) {\r\n            setDescLength(true);\r\n            allow = false;\r\n        }\r\n        if (allow) {\r\n            if (edit) {\r\n                dispatch(updateTodo({_id: data._id, title, description, color}))\r\n            } else {\r\n                dispatch(createTodo({title, description, color}))\r\n            }\r\n        }\r\n    }\r\n    return (\r\n        <div className='add-todo'>\r\n            {addedStatus && <div className='text-center'>Successfully {data ? 'edited' : 'added'}</div>}\r\n            {!addedStatus && <>\r\n                {/*block with picking color*/}\r\n                <ColorPick activeColor={color} setActive={setColor}/>\r\n                <div className=\"input-block\">\r\n                    <input type=\"text\"\r\n                           placeholder='Title'\r\n                           value={title}\r\n                           onChange={e => setTitle(e.target.value)}\r\n                    />\r\n                    {(titleLength || title.trim().length < 3) && <small>The title must be min 3 character</small>}\r\n                </div>\r\n                <div className=\"input-block\">\r\n                    <textarea placeholder='Description'\r\n                              value={description}\r\n                              onChange={e => setDescription(e.target.value)}/>\r\n                    {(descLength || description.trim().length < 5) && <small>The description must be min 5 character</small>}\r\n                </div>\r\n                <div className=\"_action\">\r\n                    {/*if creating*/}\r\n                    {!data && <div className=\"_add\" onClick={() => save()}><Plus size={26}/></div>}\r\n                    {/*if updating*/}\r\n                    {data && <div className=\"_add\" onClick={() => save(true)}><Save size={26}/></div>}\r\n                    <div className=\" danger\" onClick={cancel}><X size={26}/></div>\r\n                </div>\r\n            </>}\r\n        </div>\r\n    )\r\n}\r\nexport default AddTodo","import {useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {CheckSquare, Trash2} from 'react-feather'\r\nimport AddTodo from \"./addTodo\";\r\nimport {clearTodoList} from \"../redux/actions/todoAction\";\r\n\r\n\r\nconst TodoActions = () => {\r\n    const dispatch=useDispatch();\r\n    const data=useSelector(state=>state.todos.data);\r\n    const [addTodo, setAddTodo] = useState(false)\r\n    return (\r\n        <>\r\n            <div className=\"_actions\">\r\n                {/*clear todolist button*/}\r\n                <button className='btn danger' onClick={()=>dispatch(clearTodoList(data))}><Trash2 className='mr-2'/> Clear Todo list</button>\r\n                {/*create todo button*/}\r\n                {!addTodo && <button className='btn' onClick={()=>setAddTodo(!addTodo)}><CheckSquare className='mr-2' /> Create Todo</button>}\r\n            </div>\r\n            {/*create todo form*/}\r\n            {addTodo && <AddTodo cancel={()=>setAddTodo(false)}/>}\r\n        </>\r\n    )\r\n}\r\nexport default TodoActions","import {useState} from 'react';\r\nimport {X, Edit} from 'react-feather'\r\nimport {useDispatch} from \"react-redux\";\r\nimport {deleteTodo} from \"../redux/actions/todoAction\";\r\nimport AddTodo from \"./addTodo\";\r\n\r\nconst Todo = ({data}) => {\r\n    const dispatch = useDispatch();\r\n    const [edit, setEdit] = useState(false);\r\n    return (\r\n        <div className='_item'>\r\n            {/*if clicked edit button hide block*/}\r\n            {!edit && <>\r\n                <div style={{borderBottom: `3px solid ${data.color}`}}>\r\n                    <h3>{data.title}</h3>\r\n                    <p>{data.description}</p>\r\n                </div>\r\n                <div className=\"_action\">\r\n                    {/*edit button*/}\r\n                    <div className=\"_todo-edit\" onClick={() => setEdit(true)}><Edit size={26}/></div>\r\n                    {/*delete button*/}\r\n                    <div className=\"danger\" onClick={() => dispatch(deleteTodo(data._id))}><X size={26}/></div>\r\n                </div>\r\n            </>}\r\n            {/*if clicked edit button show form*/}\r\n            {edit && <AddTodo cancel={() => setEdit(false)} data={data}/>}\r\n        </div>\r\n    )\r\n}\r\nexport default Todo","import {useEffect} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport Todo from \"./todo\";\r\nimport {todosFetch} from \"../redux/actions/todoAction\";\r\nimport {Loader} from 'react-feather'\r\n\r\nconst TodoList = () => {\r\n    const dispatch=useDispatch();\r\n    const todos=useSelector(state=>state.todos.data);\r\n    //get todos\r\n    useEffect(()=>{\r\n        dispatch(todosFetch())\r\n    },[dispatch])\r\n    return (\r\n        <div className='_todo-list'>\r\n            {/*if todos were got*/}\r\n            {todos && todos.map(todo=>\r\n                <Todo data={todo} key={todo._id}/>\r\n            )}\r\n            {/*if there are no todo*/}\r\n            {todos && !todos.length && <div className='text-center'>There is no Todo</div>}\r\n            {/*show loader during fetching todos*/}\r\n            {!todos && <div className='text-center '><Loader className='rotate'/></div>}\r\n        </div>\r\n    )\r\n}\r\nexport default TodoList","import {useEffect} from 'react';\nimport {useSelector,useDispatch} from \"react-redux\";\nimport {toast, ToastContainer} from \"react-toastify\";\nimport TodoActions from \"./components/todoActions\";\nimport TodoList from \"./components/todoList\";\nimport {clearStatus} from \"./redux/actions/todoAction\";\n\nimport './App.scss';\nimport 'react-toastify/dist/ReactToastify.css';\n\nfunction App() {\n    const dispatch=useDispatch();\n    const errorMessage=useSelector(state=>state.todos.errorMessage);\n    //catch error and display\n    useEffect(()=>{\n        if(errorMessage!==''){\n            toast.error(errorMessage);\n            dispatch(clearStatus())\n        }\n    },[errorMessage,dispatch])\n    return (\n        <div className=\"App\">\n            <div className=\"box\">\n                <h1 className=\"_title\">\n                   Todos\n                </h1>\n                <TodoActions/>\n                <TodoList/>\n            </div>\n            <ToastContainer />\n        </div>\n\n    );\n}\n\nexport default App;\n","import {ADD_TODO, CLEAR_FROM_LIST, CLEAR_STATUS, SET_TODO, SET_TODOS, THROW_ERROR_MESSAGE} from \"../types\";\r\n\r\nconst initialState = {\r\n    data: null,\r\n    added: false,\r\n    errorMessage: ''\r\n};\r\nconst todoReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n\r\n        //set fetched todos\r\n        case SET_TODOS:\r\n            return {\r\n                ...state,\r\n                data: action.payload\r\n            }\r\n        //add created todo to list\r\n        case ADD_TODO:\r\n            return {\r\n                ...state,\r\n                data: [...state.data].push(action.payload),\r\n                added: true\r\n            }\r\n        // update edited todo to list\r\n        case SET_TODO:\r\n            return {\r\n                ...state,\r\n                data: state.data.map(todo => {\r\n                    //find and replace edited todo\r\n                    if (todo._id === action.payload._id) {\r\n                        return action.payload\r\n                    }\r\n                    return todo\r\n                }),\r\n                added: true\r\n            }\r\n        // claer from list after deleting\r\n        case CLEAR_FROM_LIST:\r\n            return {\r\n                ...state,\r\n                data: state.data.filter(todo => todo._id !== action.payload)\r\n            }\r\n        //set error message\r\n        case THROW_ERROR_MESSAGE:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.payload\r\n            }\r\n        //clear added status and error message\r\n        case CLEAR_STATUS:\r\n            return {\r\n                ...state,\r\n                added: false,\r\n                errorMessage: ''\r\n            }\r\n        default:\r\n            return state\r\n    }\r\n}\r\nexport default todoReducer","import {combineReducers} from \"redux\";\r\nimport todoReducer from '../reducers/todoReducer'\r\n\r\n\r\nexport default combineReducers({\r\n        todos:todoReducer\r\n})","import { channel } from 'redux-saga'\r\nimport {put, call, takeEvery,take} from 'redux-saga/effects';\r\nimport {TODOS_FETCH, CREATE_TODO, CLEAR_TODOLIST, DELETE_TODO, UPDATE_TODO} from \"../types\";\r\nimport {addTodo, clearFromList, setTodo, setTodos, throwErrorMessage} from \"../actions/todoAction\";\r\n\r\nconst throwErrorChannel = channel();\r\n\r\n//saga watchers\r\nexport default function* todoWatcher() {\r\n    yield takeEvery(TODOS_FETCH, todosFetchWorker);\r\n    yield takeEvery(CREATE_TODO, createTodoWorker);\r\n    yield takeEvery(UPDATE_TODO, updateTodoWorker);\r\n    yield takeEvery(CLEAR_TODOLIST, clearTodoListWorker);\r\n    yield takeEvery(DELETE_TODO, deleteTodoWorker);\r\n    while (true) {\r\n        const action = yield take(throwErrorChannel)\r\n        yield put(action)\r\n    }\r\n}\r\n//workers start\r\nfunction* todosFetchWorker() {\r\n    const res = yield call(todosFetch);\r\n    yield put(!res.error ? setTodos(res) : throwErrorMessage(res.message))\r\n\r\n}\r\n\r\nfunction* createTodoWorker(action) {\r\n    const res = yield call(createTodo, action.payload);\r\n    yield put(!res.message ? addTodo(res) : throwErrorMessage(res.message))\r\n}\r\n\r\nfunction* updateTodoWorker(action) {\r\n\r\n    const res = yield call(updateTodo, action.payload);\r\n    yield put(!res.message ? setTodo(res) : throwErrorMessage(res.message))\r\n}\r\nfunction* clearTodoListWorker(action) {\r\n    let todos = action.payload\r\n    const data = yield call(clearTodoList, todos);\r\n    let newData = [];\r\n    console.log(data)\r\n    yield data.forEach((todo) => {\r\n        if (todo !== 'deleted') {\r\n            newData.push(todos.filter(todoItem => todoItem._id === todo.id.slice(0, -1))[0])\r\n            throwErrorChannel.put(throwErrorMessage(todo.message))\r\n        }\r\n    })\r\n    yield put(setTodos(newData))\r\n}\r\nfunction* deleteTodoWorker(action) {\r\n\r\n    const res = yield call(clearTodo, action.payload);\r\n    yield put(res==='deleted'?clearFromList(action.payload):throwErrorMessage(res.message))\r\n}\r\n//workers end\r\n\r\nasync function todosFetch() {\r\n    const request = await fetch(`${process.env.REACT_APP_API_URL}todos/`, {\r\n        method: \"GET\",\r\n    });\r\n    return await request.json()\r\n}\r\n\r\nasync function createTodo(data) {\r\n    const request = await fetch(`${process.env.REACT_APP_API_URL}todos/`, {\r\n        method: \"POST\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n    return await request.json()\r\n}\r\nasync function updateTodo(data) {\r\n    const request = await fetch(`${process.env.REACT_APP_API_URL}todos/${data._id}`, {\r\n        method: \"PATCH\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify(data)\r\n    });\r\n    return await request.json()\r\n}\r\n\r\nasync function clearTodoList(data) {\r\n    return await Promise.all(data.map((todo,i) => clearTodo(i%2===0?todo._id:`${todo._id}s`)))\r\n}\r\n\r\nfunction clearTodo(id) {\r\n    return fetch(`${process.env.REACT_APP_API_URL}todos/${id}`, {\r\n        method: \"DELETE\",\r\n        headers: {\r\n            'Content-Type': 'application/json'\r\n        }\r\n    }).then(res => res.json()).then(res => res.message ? {id,message:res.message} : 'deleted');\r\n}\r\n\r\n\r\n","import {applyMiddleware, compose, createStore} from \"redux\";\r\nimport rootReducer from './reducers/rootReducer';\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport todoWatcher from \"./sagas/todoSaga\";\r\nconst saga =createSagaMiddleware()\r\n\r\nconst store = createStore(rootReducer, compose(\r\n    applyMiddleware(saga),\r\n    // window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n));\r\nsaga.run(todoWatcher);\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport {Provider} from 'react-redux';\nimport dotEnv from 'dotenv';\nimport App from './App';\nimport store from \"./redux/store\";\n\ndotEnv.config()\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n            <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}